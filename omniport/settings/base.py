"""
Django settings for omniport project.

Generated by 'django-admin startproject' using Django 1.11.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# The location of this file
from omniport.utils import populate_base_urls_map

FILE_PATH = os.path.abspath(__file__)

# The ``settings`` package inside the ``omniport`` package
SETTINGS_DIR = os.path.dirname(FILE_PATH)

# The ``omniport`` package
OMNIPORT_DIR = os.path.dirname(SETTINGS_DIR)

# The base directory, inside which the project rests
BASE_DIR = os.path.dirname(OMNIPORT_DIR)

# The ``apps`` directory where all Omniport drop-in apps will be loaded from
APPS_DIR = os.path.join(BASE_DIR, 'apps')

# The ``services`` directory where all Omniport service apps will be loaded from
SERVICES_DIR = os.path.join(BASE_DIR, 'services')

# Application declarations
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # PyPI packages
    'rest_framework',
    'channels',
    'django_countries',
    'easy_select2',
    'nested_admin',

    # Kernel
    'kernel.apps.KernelConfig',

    # Shell
    'shell.apps.ShellConfig',
]

# The individual app directories
APP_DIRS = [
    folder
    for folder in os.listdir(path=APPS_DIR)
    if os.path.isdir(os.path.join(APPS_DIR, folder))
]

# Create a path to the apps' AppConfig by parsing the app directories
APP_CONFIGS = [
    f'{folder}.apps.{folder[0].upper()}{folder[1:]}Config'
    for folder in APP_DIRS
]

INSTALLED_APPS += APP_CONFIGS

# The individual service directories
SERVICE_DIRS = [
    folder
    for folder in os.listdir(path=SERVICES_DIR)
    if os.path.isdir(os.path.join(SERVICES_DIR, folder))
]

# Create a path to the services' AppConfig by parsing the service directories
SERVICE_CONFIGS = [
    f'{folder}.apps.{folder[0].upper()}{folder[1:]}Config'
    for folder in SERVICE_DIRS
]

INSTALLED_APPS += SERVICE_CONFIGS

# App-base URL mapping maintained for future purposes
APP_BASE_URLS_MAP = dict()

populate_base_urls_map(APPS_DIR, APP_DIRS, APP_BASE_URLS_MAP)

# Service-base URL mapping maintained for future purposes
SERVICE_BASE_URLS_MAP = dict()

populate_base_urls_map(SERVICES_DIR, SERVICE_DIRS, SERVICE_BASE_URLS_MAP)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'omniport.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'omniport', 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'omniport.context.branding.logos',
                'omniport.context.site.site_information',
            ],
        },
    },
]

# Authentication

AUTH_USER_MODEL = 'kernel.User'

AUTHENTICATION_BACKENDS = [
    'kernel.auth_backends.generalised.GeneralisedAuthBackend',
]

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'omniport', 'static'),
]

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Media files

MEDIA_URL = '/media/'

MEDIA_ROOT = '/media/'

# WSGI application served by Gunicorn
WSGI_APPLICATION = 'omniport.wsgi.application'

# ASGI application served by Daphne
ASGI_APPLICATION = 'omniport.routing.application'

# Swapper models

KERNEL_POLITICALINFORMATION_MODEL = 'shell.PoliticalInformation'
KERNEL_DEPARTMENT_MODEL = 'shell.Department'
KERNEL_CENTRE_MODEL = 'shell.Centre'
KERNEL_BRANCH_MODEL = 'shell.Branch'
KERNEL_STUDENT_MODEL = 'shell.Student'
KERNEL_FACULTYMEMBER_MODEL = 'shell.FacultyMember'
